package com.junit.demo;

import static org.junit.jupiter.api.Assertions.*;

import javax.naming.LimitExceededException;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

class MathCal {
 static	MathCalculation mathCal;
	
	@BeforeEach
	 void setUp() {
		mathCal = new MathCalculation();
	}

	@Test
	public void checkAddForPosNos() {
		
		assertAll(
				()->assertEquals(200, mathCal.add(100, 100)),
				()->assertEquals(100, mathCal.add(50, 50)),
				()->assertEquals(20, mathCal.add(10, 10)),
				()->assertEquals(50, mathCal.add(30, 20))
				);
		
		
		
	}
	@Nested
	class AddTest{
		
		@Test
		public void allPos() {
			assertEquals(300, mathCal.add(100, 200) );
		}
		@Test
		public void posNdNg() {
			assertEquals(100, mathCal.add(-100, 200) );
		}
		@Test
		public void allNg() {
			assertEquals(-300, mathCal.add(-100, -200) );
		}
		@Test
		public void ngNdPos() {
			assertEquals(100, mathCal.add(-100, 200) );
		}
		
	}
	
	@Test
	public void showException() {
		assertThrows(ArithmeticException.class, ()-> mathCal.div(200, 0));
	}
	@Test
	public void checkdeposit() throws LimitExceededException {
		
		BankAccount bankAccount = new BankAccount("ujwal", 20000);
		
		assertEquals(60000, bankAccount.deposit(40000));
	}

	@Test
	public void checkNoIsPrimeOrNot() {
		MathCalculation math1 = new MathCalculation();
		assertAll(
				
				()->assertTrue(math1.checkPrime(23)),
		     	()->assertTrue(math1.checkPrime(2)),
		     	()->assertTrue(math1.checkPrime(-11)),
		     	
				()->assertFalse(math1.checkPrime(100))
		
				
				);

	}
	
	@Test
	public void isFactorial()
	{
		MathCalculation fact = new MathCalculation();
		assertAll(
				()->assertEquals(120, fact.checkFact(5)),
				()->assertEquals(24, fact.checkFact(4)),
				()->assertEquals(720, fact.checkFact(6))
				
				
				
				
				);
	}
	


}
